import sys, argparse,  os
import configparser
from configparser import NoSectionError, NoOptionError
import pandas as pd
from ChipStack import *
from Layer import *

def display_args():
    print ('lcfFile:',lcfFile)
    print ('configFile:',configFile)
    print ('modelParamsFile:',modelParamsFile)
    print ('initFile:',initFile)
    print ('steadyFile:',steadyFile)
#print ('ARGV      :', sys.argv[1:])

###################!!! Default Paths to the LCF, ModelParams, ad config files !!!#########
home_path = '/home/prachis/GitHub/CRI-Cooling-Tool/' # <- Edit this only based on tool's home directory
lcf_path = home_path+'lcf_files/'
config_path = home_path+'config_files/'
modelParams_path = home_path+'modelParams_files/'
init_path = home_path+'init_files/'
steady_path = home_path+'steady_files/'

###################!!! Parser Starts !!!#######################

######! Command-Line Arguments Description !######
parser = argparse.ArgumentParser(prog='CRICoolingTool',)
parser.add_argument('lcfFile',action='store')
parser.add_argument('configFile', action='store')
parser.add_argument('modelParamsFile', action='store')
parser.add_argument('--init', action='store',dest='initFile')
parser.add_argument('--steady', action='store',dest='steadyFile')

### Display Arguments  ###
#print(parser.parse_args())

### Create absolute file paths ###
lcfFile = lcf_path + parser.parse_args().lcfFile
configFile = config_path + parser.parse_args().configFile
modelParamsFile = modelParams_path + parser.parse_args().modelParamsFile

if (parser.parse_args().initFile is not None):
    initFile = init_path + parser.parse_args().initFile
else:
    initFile = None
if (parser.parse_args().steadyFile is not None):
    steadyFile = steady_path + parser.parse_args().steadyFile
else:
    steadyFile = None

### Display Arguments  ###
#display_args()

######! Read Layer File !######
lcf_df = pd.read_csv(lcfFile, lineterminator="\n")
#print (lcf_df)

######! Read Default config file !######
config = configparser.ConfigParser()
config.read(configFile)

######! Read ModelParams file !######
modelParams = configparser.ConfigParser()
modelParams.read(modelParamsFile)

######! Check for missing data !######
### Read all unique floorplan files names ###
flp_files = lcf_df['FloorplanFile'].unique()

### Create absolute paths for each floorplan file ###
try:
    flp_files = list(map(lambda x: modelParams['Path']['flp']+x, flp_files))
except TypeError:
    print('Error: Each FloorplanFile entry in the lcf file must be of \'string\' type')
    sys.exit(2)

config_label_df = pd.DataFrame()
for ff in flp_files:
    ff_df = pd.read_csv(ff,lineterminator='\n')
    ff_df['ConfigFile'] =ff_df['ConfigFile'].fillna(parser.parse_args().configFile)
    #print(ff_df)

    config_label_df = config_label_df.append(ff_df[['ConfigFile','Label']].drop_duplicates(), ignore_index=True)[['ConfigFile','Label']].drop_duplicates()

print (config_label_df)
config_label_df['ConfigFile'] = config_path + config_label_df['ConfigFile']
#pd.options.display.max_colwidth=100
#print (pd.options.display.max_colwidth)
#print (config_label_df['ConfigFile'])
config_label_dict = {k: g["Label"].tolist() for k,g in config_label_df.groupby("ConfigFile")}
#for k in a.keys():
#    print (k, a[k])

######! Check for missing data !######
for cf in config_label_dict.keys():
    ######! Read Config file !######
    config = configparser.ConfigParser()
    config.read(cf)
    for l in config_label_dict[cf]:
        try:
            x = config.get(l,'label')
        except (NoSectionError):
            print(l ,'is not defined in ',cf)
            sys.exit(2)
        try:
            if (modelParams[l].getboolean('coolingTechnique')):
                try:
                    if not (os.path.exists(modelParams.get(l,'library'))):
                        print('Library for cooling technique',l,':',modelParams.get(l,'library'),'does not exist')
                        sys.exit(2)
                except NoOptionError:
                    print(l, 'is a cooling technique and currently does not have a library implemented for its modeling')
                    sys.exit(2)
        except KeyError:
            pass


######! Read Default config file !######
config = configparser.ConfigParser()
config.read(configFile)

### Read initFile ###
if (initFile is None):
    val, unit = config['Init']['Temperature'].split()
    if (unit=='K' or unit == 'Kelvin'):
        initTemp = float(val)
    elif (unit=='C' or 'Celsius'):
        initTemp = float(val) - 273.15
else:
    initTemp = pd.read_csv(initFile,lineterminator="\n")

#print (parser.parse_args().initFile, initTemp)

######! Create a Chipstack !######
chipStack = ChipStack(lcf_df, config, initTemp)
print (lcf_df, config, initTemp)
#print (chipStack.Layer_dict)
